/* Heml CitationL MDN docs for variables https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_cascading_variables/Using_CSS_custom_properties. 
I chose to use variables in case I had to change them for contrast issues later. */
:root {
    --main-bg-color: #AD1414;
    --second-bg-color: #333;
    --main-color: white;
    --second-color: #F45DE7;
    --link-color: #0BEAA0;
}

/* Required use of flex */
body {
    background-color: var(--main-bg-color);
    display: flex;
    flex-direction: column;
    margin: 0;
    min-height: 100vh;
    color: var(--main-color);
}

.headNav, .footNav, button {
    background-color: var(--second-bg-color);
    overflow: hidden;
    min-height: 50px;
}

/* Style the links inside the navigation bar */
/* Help Citation: W3Schools on "making button looking links" https://www.w3schools.com/howto/howto_js_topnav.asp */
.headNav a, .footNav a {
    float: left;
    /* justify-content: left; */
    color: var(--main-color);
    text-align: center;
    padding: 17px;
    text-decoration: none;
    font-size: 17px;
}

button {
    color: var(--main-color);
    text-align: center;
    padding: 17px;
    text-decoration: none;
    font-size: 17px;
    border: none;
}

/* Different from most links, that I just want white */
/* From here on, there are several overlapping class/inherited properities
    that made me make a table to keep track of them. This was my way of
    solving CSS overlap, OOP style. */
.headNav a:hover, .footNav a:hover { 
    background-color: var(--main-color);
}

.headNav a.active {
    color: var(--main-bg-color);
    background-color: var(--main-color);
}

a:visited, a:hover {
    color: var(--second-color);
}

a {
    color: var(--link-color);
}

.footNav {
    border-top: 1px solid black;
}

.profileMain {
    flex: 1;
    text-align: center;
}

/* Help Citation: StackOverflow helped with sections next to each other https://stackoverflow.com/questions/24964101/how-to-place-two-section-elements-next-to-each-other-using-css 
I think float is interesting but really situational. I looked into using it as my featured CSS but went with variables and overlapping/inherited styles instead, as I think both of them have more use. */
#profilePic {
    max-width: 400px;
    width: 100%;
    margin: 0px 50px;
    float: left;
}

/* required use of grid */
.resumeMain {
    display: grid;
    flex: 1;
    grid-template-rows: repeat(3, auto);
    margin: 30px;
}

.portfolioMain {
    display: grid;
    flex: 1;
    grid-template-rows: repeat(4, auto);
    padding: 30px 30px;
}

/* #game {
    text-align: left;
} */

.nextTo {
    display: flex;
    justify-content: space-between;
    margin-right: 30px;
}

#school {
    margin: 0px 30px;
}

.nextToImg {
    display: flex;
    justify-content: left;
    padding: 0px 30px;
    margin-right: 30px;
}

.right-side {
    float: right;
}